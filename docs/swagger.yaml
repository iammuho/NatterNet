basePath: /api/v1/
definitions:
  dto.CreateMessageReqDTO:
    properties:
      content:
        type: string
      message_type:
        type: string
    required:
    - content
    - message_type
    type: object
  dto.CreateRoomReqDTO:
    properties:
      description:
        type: string
      is_group:
        description: Config
        type: boolean
      name:
        description: Meta
        type: string
      owner:
        description: Users
        type: string
      user_ids:
        items:
          type: string
        type: array
    required:
    - owner
    type: object
  dto.SignInReqDTO:
    properties:
      login:
        description: |-
          The login of the user. It must be alphanumeric and have a length between 3 and 100.
          required: true
          example: john_doe
        maxLength: 100
        minLength: 3
        type: string
      password:
        description: |-
          The password of the user. It must have a length between 8 and 32.
          required: true
          example: securePassword123
        maxLength: 32
        minLength: 8
        type: string
    required:
    - login
    - password
    type: object
  dto.SignupReqDTO:
    properties:
      email:
        description: |-
          The email address of the user. It must be a valid email format.
          required: true
          example: john.doe@example.com
        type: string
      password:
        description: |-
          The desired password for the user. It must have a length between 8 and 32.
          required: true
          example: securePassword123
        maxLength: 32
        minLength: 8
        type: string
      username:
        description: |-
          The desired username for the user. It must be alphanumeric and have a length between 3 and 20.
          required: true
          example: john_doe
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  entity.MessageType:
    enum:
    - text
    - image
    - video
    - audio
    - file
    - link
    type: string
    x-enum-varnames:
    - MessageTypeText
    - MessageTypeImage
    - MessageTypeVideo
    - MessageTypeAudio
    - MessageTypeFile
    - MessageTypeLink
  entity.RoomConfig:
    properties:
      room_type:
        $ref: '#/definitions/entity.RoomType'
    type: object
  entity.RoomMeta:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  entity.RoomType:
    enum:
    - group
    - private
    type: string
    x-enum-varnames:
    - RoomTypeGroup
    - RoomTypePrivate
  entity.RoomUser:
    properties:
      created_at:
        description: Timestamps
        type: string
      is_muted:
        description: Booleans
        type: boolean
      role:
        $ref: '#/definitions/entity.RoomUserRole'
      status:
        allOf:
        - $ref: '#/definitions/entity.RoomUserStatus'
        description: Status
      updated_at:
        type: string
      user_id:
        description: User Details
        type: string
    type: object
  entity.RoomUserRole:
    enum:
    - admin
    - member
    type: string
    x-enum-varnames:
    - RoomUserRoleAdmin
    - RoomUserRoleMember
  entity.RoomUserStatus:
    enum:
    - active
    - left
    type: string
    x-enum-varnames:
    - RoomUserStatusActive
    - RoomUserStatusLeft
  errorhandler.Response:
    properties:
      code:
        type: integer
      message: {}
      status_code:
        type: integer
    type: object
  jwt.JWTResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
    type: object
  values.MessageValue:
    properties:
      content:
        description: Attributes
        type: string
      created_at:
        description: Timestamps
        type: string
      id:
        type: string
      message_type:
        $ref: '#/definitions/entity.MessageType'
      room_id:
        description: Relations
        type: string
      sender_id:
        type: string
      updated_at:
        type: string
    type: object
  values.RoomValue:
    properties:
      config:
        $ref: '#/definitions/entity.RoomConfig'
      created_at:
        description: Timestamps
        type: string
      id:
        type: string
      last_message_at:
        type: string
      last_message_id:
        description: Last Message Fields
        type: string
      meta:
        allOf:
        - $ref: '#/definitions/entity.RoomMeta'
        description: Room Details
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/entity.RoomUser'
        type: array
    type: object
  values.UserValue:
    properties:
      created_at:
        description: Timestamps
        type: string
      email:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        description: Account information
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: muhammet.arsln@gmail.com
    name: NatterNet API Support
  description: NatterNet Chat API Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: NatterNet API
  version: "1.0"
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticates a user based on provided login and password.
      parameters:
      - description: Signin data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SignInReqDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated.
          schema:
            $ref: '#/definitions/jwt.JWTResponse'
        "401":
          description: 'Unauthorized: Invalid credentials.'
          schema:
            $ref: '#/definitions/errorhandler.Response'
      summary: Sign in
      tags:
      - Authentication
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user.
      parameters:
      - description: Sign Up Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.SignupReqDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.JWTResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorhandler.Response'
      summary: Register a new user
      tags:
      - Authentication
  /chat/room:
    post:
      consumes:
      - application/json
      description: Allows authenticated users to create a new chat room.
      parameters:
      - description: Create Room
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoomReqDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/values.RoomValue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorhandler.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new chat room
      tags:
      - Room
  /chat/rooms:
    get:
      consumes:
      - application/json
      description: Retrieves a list of chat rooms based on filters, sorting and pagination.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: per_page
        type: integer
      - default: '"created_at"'
        description: Field to sort by
        in: query
        name: sort_field
        type: string
      - default: '"desc"'
        description: Order of sorting
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      - description: Filter rooms where user is in
        in: query
        name: user_in
        type: string
      - description: Filter rooms where user is not in
        in: query
        name: user_not_in
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/values.RoomValue'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorhandler.Response'
      security:
      - ApiKeyAuth: []
      summary: Query chat rooms
      tags:
      - Room
  /chat/rooms/{roomID}/messages:
    post:
      consumes:
      - application/json
      description: Creates a new message within the specified chat room.
      parameters:
      - description: ID of the chat room
        in: path
        name: roomID
        required: true
        type: string
      - description: Message details
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMessageReqDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/values.MessageValue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorhandler.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new message
      tags:
      - Message
  /rooms/{roomID}/messages:
    get:
      consumes:
      - application/json
      description: Retrieve messages for a room, with optional pagination and sorting.
      parameters:
      - description: ID of the Room
        in: path
        name: roomID
        required: true
        type: string
      - description: Page number for pagination. Defaults to 1.
        in: query
        name: page
        type: integer
      - description: Number of messages per page for pagination. Defaults to 10.
        in: query
        name: per_page
        type: integer
      - description: Field to sort by. Defaults to created_at.
        in: query
        name: sort_field
        type: string
      - description: Order of sorting (asc/desc). Defaults to desc.
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/values.MessageValue'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorhandler.Response'
      summary: Query messages for a specific room.
      tags:
      - Message
  /user/me:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's own details.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/values.UserValue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errorhandler.Response'
      security:
      - ApiKeyAuth: []
      summary: User's own details
      tags:
      - User
swagger: "2.0"
