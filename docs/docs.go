// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "NatterNet API Support",
            "email": "muhammet.arsln@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/signin": {
            "post": {
                "description": "Authenticates a user based on provided login and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign in",
                "parameters": [
                    {
                        "description": "Signin data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignInReqDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated.",
                        "schema": {
                            "$ref": "#/definitions/jwt.JWTResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid credentials.",
                        "schema": {
                            "$ref": "#/definitions/errorhandler.Response"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Registers a new user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Sign Up Info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignupReqDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jwt.JWTResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorhandler.Response"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the authenticated user's own details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "User's own details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/values.UserValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorhandler.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.SignInReqDTO": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "description": "The login of the user. It must be alphanumeric and have a length between 3 and 100.\nrequired: true\nexample: john_doe",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "password": {
                    "description": "The password of the user. It must have a length between 8 and 32.\nrequired: true\nexample: securePassword123",
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                }
            }
        },
        "dto.SignupReqDTO": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "The email address of the user. It must be a valid email format.\nrequired: true\nexample: john.doe@example.com",
                    "type": "string"
                },
                "password": {
                    "description": "The desired password for the user. It must have a length between 8 and 32.\nrequired: true\nexample: securePassword123",
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                },
                "username": {
                    "description": "The desired username for the user. It must be alphanumeric and have a length between 3 and 20.\nrequired: true\nexample: john_doe",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "errorhandler.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {},
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "jwt.JWTResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "values.UserValue": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "description": "Account information",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1/",
	Schemes:          []string{},
	Title:            "NatterNet API",
	Description:      "NatterNet Chat API Documentation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
