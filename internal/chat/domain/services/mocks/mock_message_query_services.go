// Code generated by MockGen. DO NOT EDIT.
// Source: message_query_services.go

// Package mockchatdomainservices is a generated GoMock package.
package mockchatdomainservices

import (
	reflect "reflect"

	dto "github.com/iammuho/natternet/internal/chat/application/dto"
	values "github.com/iammuho/natternet/internal/chat/domain/values"
	errorhandler "github.com/iammuho/natternet/pkg/errorhandler"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageQueryDomainServices is a mock of MessageQueryDomainServices interface.
type MockMessageQueryDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueryDomainServicesMockRecorder
}

// MockMessageQueryDomainServicesMockRecorder is the mock recorder for MockMessageQueryDomainServices.
type MockMessageQueryDomainServicesMockRecorder struct {
	mock *MockMessageQueryDomainServices
}

// NewMockMessageQueryDomainServices creates a new mock instance.
func NewMockMessageQueryDomainServices(ctrl *gomock.Controller) *MockMessageQueryDomainServices {
	mock := &MockMessageQueryDomainServices{ctrl: ctrl}
	mock.recorder = &MockMessageQueryDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueryDomainServices) EXPECT() *MockMessageQueryDomainServicesMockRecorder {
	return m.recorder
}

// QueryMessages mocks base method.
func (m *MockMessageQueryDomainServices) QueryMessages(arg0 *dto.QueryMessagesReqDTO) ([]*values.MessageValue, *errorhandler.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMessages", arg0)
	ret0, _ := ret[0].([]*values.MessageValue)
	ret1, _ := ret[1].(*errorhandler.Response)
	return ret0, ret1
}

// QueryMessages indicates an expected call of QueryMessages.
func (mr *MockMessageQueryDomainServicesMockRecorder) QueryMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMessages", reflect.TypeOf((*MockMessageQueryDomainServices)(nil).QueryMessages), arg0)
}
