// Code generated by MockGen. DO NOT EDIT.
// Source: message_command_services.go

// Package mockchatdomainservices is a generated GoMock package.
package mockchatdomainservices

import (
	reflect "reflect"

	dto "github.com/iammuho/natternet/internal/chat/application/dto"
	values "github.com/iammuho/natternet/internal/chat/domain/values"
	errorhandler "github.com/iammuho/natternet/pkg/errorhandler"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageCommandDomainServices is a mock of MessageCommandDomainServices interface.
type MockMessageCommandDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockMessageCommandDomainServicesMockRecorder
}

// MockMessageCommandDomainServicesMockRecorder is the mock recorder for MockMessageCommandDomainServices.
type MockMessageCommandDomainServicesMockRecorder struct {
	mock *MockMessageCommandDomainServices
}

// NewMockMessageCommandDomainServices creates a new mock instance.
func NewMockMessageCommandDomainServices(ctrl *gomock.Controller) *MockMessageCommandDomainServices {
	mock := &MockMessageCommandDomainServices{ctrl: ctrl}
	mock.recorder = &MockMessageCommandDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageCommandDomainServices) EXPECT() *MockMessageCommandDomainServicesMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockMessageCommandDomainServices) CreateMessage(arg0 *dto.CreateMessageReqDTO) (*values.MessageValue, *errorhandler.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0)
	ret0, _ := ret[0].(*values.MessageValue)
	ret1, _ := ret[1].(*errorhandler.Response)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageCommandDomainServicesMockRecorder) CreateMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageCommandDomainServices)(nil).CreateMessage), arg0)
}
