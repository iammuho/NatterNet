// Code generated by MockGen. DO NOT EDIT.
// Source: user_query_services.go

// Package mockuserdomainservices is a generated GoMock package.
package mockuserdomainservices

import (
	reflect "reflect"

	values "github.com/iammuho/natternet/internal/user/domain/values"
	errorhandler "github.com/iammuho/natternet/pkg/errorhandler"
	gomock "go.uber.org/mock/gomock"
)

// MockUserQueryDomainServices is a mock of UserQueryDomainServices interface.
type MockUserQueryDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueryDomainServicesMockRecorder
}

// MockUserQueryDomainServicesMockRecorder is the mock recorder for MockUserQueryDomainServices.
type MockUserQueryDomainServicesMockRecorder struct {
	mock *MockUserQueryDomainServices
}

// NewMockUserQueryDomainServices creates a new mock instance.
func NewMockUserQueryDomainServices(ctrl *gomock.Controller) *MockUserQueryDomainServices {
	mock := &MockUserQueryDomainServices{ctrl: ctrl}
	mock.recorder = &MockUserQueryDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQueryDomainServices) EXPECT() *MockUserQueryDomainServicesMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockUserQueryDomainServices) FindByID(id string) (*values.UserValue, *errorhandler.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*values.UserValue)
	ret1, _ := ret[1].(*errorhandler.Response)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserQueryDomainServicesMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserQueryDomainServices)(nil).FindByID), id)
}
